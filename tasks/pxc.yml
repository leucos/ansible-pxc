##
# Percona database setup.
#
#

- name: Adds percona key
  apt_key:
    keyserver: keys.gnupg.net
    id: "{{ item }}"
    state: present
  with_items:
    - E1E2CD202D607DAF
    - 1C4CBDCDCD2EFD2A
    - 9334A25F8507EFA5
    - 9E003FA64CAC6D72
  tags: ["pxc:keys"]

- name: Adds percona repositories
  apt_repository:
    repo: 'deb http://repo.percona.com/apt {{ ansible_distribution_release }} main'
    state: present

- name: Sets root password
  debconf:
    name: "percona-xtradb-cluster-{{ pxc_version|replace('.','') }}"
    question: "{{ item }}"
    value: "{{ pxc_root_password }}"
    vtype: 'password'
  changed_when: false
  with_items:
    - 'root_password'
    - 'root_password_again'

- name: Sets root password again
  debconf:
    name: "percona-xtradb-cluster-server-{{ pxc_version }}"
    question: "percona-xtradb-cluster-server/{{ item }}"
    value: "{{ pxc_root_password }}"
    vtype: 'password'
  changed_when: false
  with_items:
    - 'root_password'
    - 'root_password_again'

- name: Configures for easy access as root user
  template:
    src: "../templates/root_my.cnf.j2"
    dest: /root/.my.cnf

- name: Adds ferm filtering
  template:
    src: "../templates/ferm.j2"
    dest: /etc/ferm/filter-input.d/60_mysql.conf
  when: ferm_enabled | default(false)
  tags: ["ferm"]
  notify: Restart ferm

- name: Installs percona-server
  apt:
    pkg: "percona-xtradb-cluster-{{ pxc_version|replace('.','') }}"
    state: present
  register: __pxc_installed
  notify: Restart pxc non primary

- name: Installs additional tools
  apt:
    pkg:
      - sysbench
      - python-mysqldb
    state: latest

- name: Installs additional tools for 5.6
  apt:
    pkg:
      - percona-xtrabackup
      - percona-toolkit
    state: latest
  when: pxc_version|version_compare('5.7','<')

# We have to ignore errors so we can recover from cluster failuer and try to
# bootstrap it again
- name: Adds replication user
  mysql_user:
    priv: "*.*:GRANT,RELOAD,REPLICATION CLIENT,LOCK TABLES,PROCESS"
    user: "{{ pxc_cluster_sst_user }}"
    password: "{{ pxc_cluster_sst_password }}"
    host: localhost
  ignore_errors: true
  when: inventory_hostname == pxc_cluster_primary

- name: Creates monitoring user
  mysql_user:
    name: "{{ pxc_monitoring_user }}"
    password: "{{ pxc_monitoring_password }}"
    priv: "*.*:REPLICATION CLIENT,PROCESS"
    host: "{{ item }}"
    state: present
  when: pxc_monitoring_user is defined and pxc_monitoring_user and pxc_monitoring_password is defined and pxc_monitoring_password
  with_items:
    - localhost
    - 127.0.0.1
  tags: ["pxc","pxc:client","pcx:monitoring"]

- name: Stop all instances
  service: name=mysql state=stopped
  when: __pxc_installed is changed

- name: Adds mysql charset config
  template:
    src: "{{ item }}.j2"
    dest: "/etc/mysql/conf.d/zz_local_{{ item }}"
    backup: yes
  with_items:
    - charset.cnf
  notify: Restart pxc cluster
  tags: ["pxc:config"]

- name: Adds pxc config
  template:
    src: "{{ item }}.j2"
    dest: "/etc/mysql/percona-xtradb-cluster.conf.d/zz_local_{{ item }}"
    backup: yes
  with_items:
    - wsrep.cnf
  notify: Restart pxc cluster
  tags: ["pxc:config"]

- name: Adds logrotate config
  template:
    src: "../templates/logrotate.j2"
    dest: "/etc/logrotate.d/percona-xtradb-cluster-server-{{ pxc_version }}"
  tags: ["pxc:config"]

# - name: Deletes anonymous MySQL server user for ansible_fqdn
#   mysql_user: >
#     user="" host="{{ ansible_fqdn }}"
#     state="absent"
#   when: inventory_hostname == pxc_cluster_primary
# 
# - name: Deletes anonymous MySQL server user for localhost
#   mysql_user: >
#     user=""
#     state="absent"
#   when: inventory_hostname == pxc_cluster_primary
# 
# - name: Secures the MySQL root user for IPV6 localhost (::1)
#   mysql_user: >
#     user="root"
#     password="{{ pxc_root_password }}"
#     host="::1"
#   when: inventory_hostname == pxc_cluster_primary
# 
# 
# - name: Secures the MySQL root user for IPV4 localhost (127.0.0.1)
#   mysql_user: >
#     user="root"
#     password="{{ pxc_root_password }}"
#     host="127.0.0.1"
#   when: inventory_hostname == pxc_cluster_primary
# 
# - name: Secures the MySQL root user for localhost domain (localhost)
#   mysql_user: >
#     user="root"
#     password="{{ pxc_root_password }}"
#     host="localhost"
#   when: inventory_hostname == pxc_cluster_primary
# 
# - name: Secures the MySQL root user for server_hostname domain
#   mysql_user: >
#     user="root"
#     password="{{ pxc_root_password }}"
#     host="{{ ansible_fqdn }}"
#   when: inventory_hostname == pxc_cluster_primary
# 
# - name: Removes the MySQL test database
#   mysql_db: >
#     db=test
#     state=absent
# 
